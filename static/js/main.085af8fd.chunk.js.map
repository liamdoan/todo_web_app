{"version":3,"sources":["App.js","index.js"],"names":["App","useState","todos","setTodos","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","className","onSubmit","e","preventDefault","newTodo","id","Date","getTime","text","completed","concat","type","placeholder","onChange","target","value","map","updatedTodos","toggleComplete","checked","onClick","editTodo","filter","deleteTodo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPA+HeA,EA3HH,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAGA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEA,EAAsCJ,mBAAS,MAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAEA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAwDA,OACE,sBAAKC,UAAU,UAAf,UACE,iDAGA,uBAAMA,UAAU,YAAYC,SAzDhC,SAAsBC,GAEpBA,EAAEC,iBAEF,IAAMC,EAAU,CACdC,IAAI,IAAIC,MAAOC,UAEfC,KAAMd,EACNe,WAAW,GAGbhB,EAAS,YAAID,GAAOkB,OAAON,IAG3BT,EAAQ,KA2CN,UAEE,uBAAOgB,KAAK,OACJC,YAAY,aACZC,SAAU,SAACX,GAAD,OAAOP,EAAQO,EAAEY,OAAOC,QAClCA,MAAOrB,EACPM,UAAU,eAClB,wBAAQA,UAAU,gBACVW,KAAK,SADb,0BAQDnB,EAAMwB,KAAI,SAAAtB,GAAI,OACX,sBAAKM,UAAU,WAAf,UAEGJ,IAAgBF,EAAKW,GAClB,uBAAOM,KAAK,OACNE,SAAU,SAACX,GAAD,OAAOH,EAAeG,EAAEY,OAAOC,QACzCA,MAAOjB,IACf,8BAAMJ,EAAKc,OAGX,sBAAKR,UAAU,UAAf,UACE,uBAAOW,KAAK,WACJE,SAAU,kBAjEhC,SAAwBR,GACtB,IAAMY,EAAe,YAAIzB,GAAOwB,KAAI,SAAAtB,GAIlC,OAHIA,EAAKW,KAAOA,IACdX,EAAKe,WAAaf,EAAKe,WAElBf,KAGTD,EAASwB,GAyD2BC,CAAexB,EAAKW,KACpCc,QAASzB,EAAKe,UACdT,UAAU,mBAEjBJ,IAAgBF,EAAKW,GAClB,wBAAQL,UAAU,kBACVoB,QAAS,kBA3DnC,SAAkBf,GAChB,IAAMY,EAAe,YAAIzB,GAAOwB,KAAI,SAAAtB,GAIlC,OAHGA,EAAKW,KAAOA,IACbX,EAAKc,KAAOV,GAEPJ,KAETD,EAASwB,GAGRpB,EAAe,MACfE,EAAe,IAgDuBsB,CAAS3B,EAAKW,KADrC,yBAIA,wBAAQL,UAAU,WACVoB,QAAS,kBAAMvB,EAAeH,EAAKW,KAD3C,wBAKJ,wBAAQL,UAAU,aACVoB,QAAS,kBArD/B,SAAoBf,GAClB,IAAMY,EAAe,YAAIzB,GAAO8B,QAAO,SAAA5B,GAAI,OAAIA,EAAKW,KAAOA,KAC3DZ,EAASwB,GAmD0BM,CAAW7B,EAAKW,KADvC,yBAxBKX,EAAKW,WCrF1BmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.085af8fd.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './App.css';\n\n\nconst App = () => {\n\n  const [todos, setTodos] = useState([])\n\n  // keep track of current todo\n  const [todo, setTodo] = useState(\"\")\n\n  const [todoEditing, setTodoEditing] = useState(null)\n\n  const [editingText, setEditingText] = useState(\"\")\n\n \n\n  function handleSubmit(e) {\n    // need e value, because by default form will refresh the page when submitted\n    e.preventDefault()\n\n    const newTodo = {\n      id: new Date().getTime(),\n      // better to have id when working with multiple object\n      text: todo,\n      completed: false\n    }\n \n    setTodos([...todos].concat(newTodo))\n\n    // reset input after adding newTodo, by setting todo to an empty string\n    setTodo(\"\")\n  }\n\n\n\n  function toggleComplete(id) {\n    const updatedTodos = [...todos].map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo\n    })\n\n    setTodos(updatedTodos)\n  }\n\n\n  function editTodo(id) {\n    const updatedTodos = [...todos].map(todo => {\n      if(todo.id === id ) {\n        todo.text = editingText\n      }\n      return todo\n    })\n    setTodos(updatedTodos)\n\n     // reset\n     setTodoEditing(null)\n     setEditingText(\"\")\n  }\n\n\n  function deleteTodo(id) {\n    const updatedTodos = [...todos].filter(todo => todo.id !== id)\n    setTodos(updatedTodos)\n  }\n\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Tasks for today</h1>\n\n      {/*FORM*/}\n      <form className=\"todo-form\" onSubmit={handleSubmit}>\n          {/* handleSubmit will run everytime the button is clicked */}\n        <input type=\"text\" \n                placeholder=\"What to do\"\n                onChange={(e) => setTodo(e.target.value)}\n                value={todo}\n                className=\"todo-input\"/>\n        <button className=\"submit-button\" \n                type=\"submit\"\n                >\n                  Add Tasks\n                </button>\n      </form>\n\n      {/* LIST */}\n      {todos.map(todo => \n          <div className=\"todo-row\" \n                key={todo.id}>\n            {todoEditing === todo.id \n            ?   <input type=\"text\" \n                      onChange={(e) => setEditingText(e.target.value)} \n                      value={editingText}/>\n            : <div>{todo.text}</div>}\n              {/* 'todo' is changable */}\n             \n              <div className=\"buttons\">\n                <input type=\"checkbox\" \n                        onChange={() => toggleComplete(todo.id)}\n                        checked={todo.completed}\n                        className=\"check-complete\"/>\n\n                {todoEditing === todo.id \n                  ? <button className=\"submit-edit-btn\" \n                            onClick={() => editTodo(todo.id)}>\n                      Submit Edit\n                    </button>\n                  : <button className=\"edit-btn\" \n                            onClick={() => setTodoEditing(todo.id)}>\n                      Edit Tasks\n                    </button>}\n\n                <button className=\"delete-btn\" \n                        onClick={() => deleteTodo(todo.id)}>\n                    Delete\n                  </button>\n              </div>\n            \n            </div>\n            )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}