{"version":3,"sources":["App.js","index.js"],"names":["App","date","String","window","Date","slice","useState","todos","setTodos","todo","setTodo","desc","setDesc","todoEditing","setTodoEditing","editingText","setEditingText","editingDesc","setEditingDesc","className","onSubmit","e","preventDefault","newTodo","id","getTime","timeCreate","timeUpdate","text","description","completed","concat","type","placeholder","onChange","target","value","map","updatedTodos","toggleComplete","checked","onClick","editTodo","filter","deleteTodo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c75f2442.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport './App.css';\n\n\nconst App = () => {\n\n  let time = String(new window.Date())     \n    let date = time.slice(0,25)\n\n    const [todos, setTodos] = useState([])\n\n    // keep track of current todo\n    const [todo, setTodo] = useState(\"\")\n    const [desc, setDesc] = useState(\"\")\n\n    const [todoEditing, setTodoEditing] = useState(null)\n\n    const [editingText, setEditingText] = useState(\"\")\n    const [editingDesc, setEditingDesc] = useState(\"\")\n\n  \n// ----------------------------SUBMIT-------------------------\n    function handleSubmit(e) {\n      e.preventDefault()\n\n      const newTodo = {\n        id: new Date().getTime(),\n        // better to have id when working with multiple object\n        timeCreate: \"Created at: \" + date,\n        timeUpdate: \"\",\n        text: todo,\n        description: desc,\n        completed: false\n      }\n      setTodos([...todos].concat(newTodo))\n      // reset input after adding newTodo, by setting todo to an empty string\n      setTodo(\"\")\n      setDesc(\"\")\n    }\n\n\n  // ------------------------------TOGGLE COMPLETE--------------------------\n    function toggleComplete(id) {\n      const updatedTodos = [...todos].map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n      setTodos(updatedTodos)\n    }\n\n\n  // ------------------------------EDIT TODO-----------------------------\n    function editTodo(id) {\n      const updatedTodos = [...todos].map(todo => {\n        if(todo.id === id ) {\n          todo.text = editingText\n          todo.description = editingDesc\n          todo.timeUpdate = \"Update at: \" + date\n        }\n        return todo\n      })\n      setTodos(updatedTodos)\n      // reset\n      setTodoEditing(null)\n      setEditingText(\"\")\n      setEditingDesc(\"\")\n    }\n\n\n  // ------------------------DELETE--------------------------------\n    function deleteTodo(id) {\n      const updatedTodos = [...todos].filter(todo => todo.id !== id)\n      setTodos(updatedTodos)\n    }\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Tasks for today</h1>\n\n{/*-----------FORM---------------*/}\n      <form className=\"todo-form\" onSubmit={handleSubmit}>\n        <div className=\"input-column\">\n          <input type=\"text\" \n                  placeholder=\"What to do\"\n                  onChange={(e) => setTodo(e.target.value)}\n                  value={todo}\n                  className=\"todo-input\"/>\n          <input type=\"text\" \n                  placeholder=\"Description\"\n                  onChange={(e) => setDesc(e.target.value)}\n                  value={desc}\n                  className=\"desc-input\"/>\n        </div>\n        <button className=\"submit-button\" \n                type=\"submit\"\n                >\n                  Add Tasks\n        </button>\n      </form>\n\n{/*----------------------LIST-------------------------*/}\n      {todos.map(todo => \n          <div className=\"todo-row\" \n                key={todo.id}>\n            {\n              todoEditing === todo.id \n              ? \n              <div className=\"input-edit-wrap\">  \n                <input type=\"text\" \n                      onChange={(e) => setEditingText(e.target.value)} \n                      value={editingText}/>\n                <input type=\"text\" \n                      onChange={(e) => setEditingDesc(e.target.value)} \n                      value={editingDesc}/>\n              </div>\n              : \n              <div className=\"input-show\">\n                <p className=\"input-show-name\">{todo.text}</p>\n                <p className=\"input-show-desc\">{todo.description}</p>\n                <p className=\"input-show-time\">\n                  <span className=\"span-time\">{todo.timeCreate}</span>\n                </p>\n                <p className=\"input-show-time\">\n                  <span className=\"span-time\">{todo.timeUpdate}</span>\n                </p>\n              </div>\n            }\n              {/* 'todo' is changable */}\n             \n              <div className=\"buttons\">\n                <input type=\"checkbox\" \n                        onChange={() => toggleComplete(todo.id)}\n                        checked={todo.completed}\n                        className=\"check-complete\"/>\n                {\n                  todoEditing === todo.id \n                  ? <button className=\"submit-edit-btn\" \n                            onClick={() => editTodo(todo.id)}>\n                      Submit Edit\n                    </button>\n                  : <button className=\"edit-btn\" \n                            onClick={() => setTodoEditing(todo.id)}>\n                      Edit Tasks\n                    </button>\n                }\n                  <button className=\"delete-btn\" \n                        onClick={() => deleteTodo(todo.id)}>\n                    Delete\n                  </button>\n              </div>\n            \n            </div>\n            )}\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}